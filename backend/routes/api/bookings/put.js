const express = require('express');

const { requireAuth } = require('../../../utils/auth');

const { Booking, Spot, SpotImage, User } = require('../../../db/models');

const { validateBooking } = require('./validate.js');

const router = express.Router();

/*
### Edit a Booking

Update and return an existing booking.

* Require Authentication: true
* Require proper authorization: Booking must belong to the current user
* Request
  * Method: PUT
  * URL: /api/bookings/:bookingId
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "startDate": "2021-11-19",
      "endDate": "2021-11-20"
    }
    ```

* Successful Response
  * Status Code: 200
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "id": 1,
      "spotId": 1,
      "userId": 2,
      "startDate": "2021-11-19",
      "endDate": "2021-11-20",
      "createdAt": "2021-11-19 20:39:36",
      "updatedAt": "2021-11-20 10:06:40"
    }
    ```

* Error response: Body validation errors
  * Status Code: 400
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
      "errors": {
        "endDate": "endDate cannot come before startDate"
      }
    }
    ```

* Error response: Couldn't find a Booking with the specified id
  * Status Code: 404
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "message": "Booking couldn't be found"
    }
    ```

* Error response: Can't edit a booking that's past the end date
  * Status Code: 403
  * Headers:
    * Content-Type: application/json
  * Body: 

    ```json
    {
      "message": "Past bookings can't be modified"
    }
    ```

* Error response: Booking conflict
  * Status Code: 403
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "message": "Sorry, this spot is already booked for the specified dates",
      "errors": {
        "startDate": "Start date conflicts with an existing booking",
        "endDate": "End date conflicts with an existing booking"
      }
    }
    ```


*/


router.put("/:bookingId", requireAuth, validateBooking, async(req, res, _next) => {

  //looking for booking
  const booking = await Booking.findByPk(req.params.bookingId)
 
  //check if booking was found
  if (booking === null) {
    return res.status(404).json({ message: "Booking couldn't be found" })
  }
  //check if spot belongs to current user
  if (booking.userId !== req.user.id) {
    return res.status(403).json({ message: "Forbidden" })
  }

  //Can't edit a booking that's past the end date

  let date = new Date();


  if (booking.endDate >= date){
    return res.status(403).json({ message: "Past bookings can't be modified" })
  }

  //spot is already booked for the specified dates
  if (booking.endDate >= date){
    return res.status(403).json({ message: "Past bookings can't be modified" })
  }
   
 await booking.update(req.body)
 
   return res.json(booking)
 })

module.exports = router;